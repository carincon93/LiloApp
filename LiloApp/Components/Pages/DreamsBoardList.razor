@page "/dreams-board/list"

@inject LiloApp.Services.NavigatorService NavigatorService
@inject LiloApp.ViewModels.MainViewModel ViewModel
@using LiloApp.Data

<h1 class="text-5xl font-medium my-12 mx-10 text-center text-white">Mapa de sueños</h1>

<div class="grid h-full w-full grid-cols-2 gap-4">
   @if (ViewModel.Dreams == null)
    {
        <p>Loading</p>
    }
    else 
    {
        @foreach (var dream in ViewModel.Dreams)
        {
             <button @onclick="@(() => ToggleMonthsPopup(@dream.Title, dream.Id))" class="w-full flex bg-white h-32 items-center justify-center font-medium rounded-xl shadow-xl">@dream.Title</button>
        }
    }
</div>

<div class="p-6 mt-4">
    <button class="block w-full relative p-[0.7em] text-lg" @onclick="ToggleNewDreamPopup">
        <svg class="button__shape w-full" viewBox="0 0 100 100" preserveAspectRatio="none" aria-hidden="true">
            <path class="button__path" d="M0,0 C0,-5 100,-5 100,0 C105,0 105,100 100,100 C100,105 0,105 0,100 C-5,100 -5,0 0,0 z" />
        </svg>
        <span class="block relative text-center text-white">
            Agregar sueño
        </span>
    </button>
</div>

@if (isNewDreamPopupVisible)
{
    <div class="fixed inset-0 backdrop-blur-sm bg-white/30 flex items-center justify-center z-[10000]">
        <div class="bg-white rounded-2xl shadow-lg w-9/12">
            <div class="p-3 flex justify-between">
                <span></span>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6" @onclick="ToggleNewDreamPopup">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                </svg>
            </div>

            <div>
                <h1 class="text-center font-medium text-2xl">Nuevo sueño</h1>
            </div>

            <div class="p-6">
                <EditForm Model="newDreamData" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <InputText id="dream" @bind-Value="newDreamData.Title" placeholder="Nombre del sueño" class="bg-gray-100 p-2 rounded-md text-center" />

                    <button class="block w-full relative p-[0.3em] mt-8 text-lg" type="submit">
                        <svg class="button__shape w-full" viewBox="0 0 100 100" preserveAspectRatio="none" aria-hidden="true">
                            <path class="button__path" d="M0,0 C0,-5 100,-5 100,0 C105,0 105,100 100,100 C100,105 0,105 0,100 C-5,100 -5,0 0,0 z" />
                        </svg>
                        <span class="block relative text-center text-white">
                            Guardar
                        </span>
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (isMonthsPopupVisible)
{
    <div class="fixed inset-0 backdrop-blur-sm bg-white/30 flex items-center justify-center z-[10000]">
        <div class="bg-white rounded-2xl shadow-lg w-9/12">
            <div class="p-3 flex justify-between">
                <span></span>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6" @onclick="@(() => ToggleMonthsPopup("", 0))">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                </svg>
            </div>

            <div>
                <h1 class="text-center font-medium text-2xl">Seleccione un mes</h1>
            </div>

            <div class="p-6 grid grid-cols-2 gap-4">
                <NavLink href="@($"/dreams-board/list/{Dreamparam}/1/{Dreamidparam}")" class="block w-full shadow p-2">Enero</NavLink>
                <NavLink href="@($"/dreams-board/list/{Dreamparam}/2/{Dreamidparam}")" class="block w-full shadow p-2">Febrero</NavLink>
                <NavLink href="@($"/dreams-board/list/{Dreamparam}/3/{Dreamidparam}")" class="block w-full shadow p-2">Marzo</NavLink>
                <NavLink href="@($"/dreams-board/list/{Dreamparam}/4/{Dreamidparam}")" class="block w-full shadow p-2">Abril</NavLink>
                <NavLink href="@($"/dreams-board/list/{Dreamparam}/5/{Dreamidparam}")" class="block w-full shadow p-2">Mayo</NavLink>
                <NavLink href="@($"/dreams-board/list/{Dreamparam}/6/{Dreamidparam}")" class="block w-full shadow p-2">Junio</NavLink>
                <NavLink href="@($"/dreams-board/list/{Dreamparam}/7/{Dreamidparam}")" class="block w-full shadow p-2">Julio</NavLink>
                <NavLink href="@($"/dreams-board/list/{Dreamparam}/8/{Dreamidparam}")" class="block w-full shadow p-2">Agosto</NavLink>
                <NavLink href="@($"/dreams-board/list/{Dreamparam}/9/{Dreamidparam}")" class="block w-full shadow p-2">Septiembre</NavLink>
                <NavLink href="@($"/dreams-board/list/{Dreamparam}/10/{Dreamidparam}")" class="block w-full shadow p-2">Octubre</NavLink>
                <NavLink href="@($"/dreams-board/list/{Dreamparam}/11/{Dreamidparam}")" class="block w-full shadow p-2">Noviembre</NavLink>
                <NavLink href="@($"/dreams-board/list/{Dreamparam}/12/{Dreamidparam}")" class="block w-full shadow p-2">Diciembre</NavLink>
            </div>
        </div>
    </div>
}

@code {
    private DreamData newDreamData = new DreamData();
    private bool isNewDreamPopupVisible = false;
    private bool isMonthsPopupVisible = false;
    private string Dreamparam { get; set; }
    private int Dreamidparam { get; set; }

    public int Month = DateTime.Now.Month;

    protected override void OnInitialized()
    {
        NavigatorService.NavigateTo("DreamsBoardListPage");
    }

    protected void ToggleNewDreamPopup()
    {
        isNewDreamPopupVisible = !isNewDreamPopupVisible;
    }

    protected void ToggleMonthsPopup(string title, int id)
    {
        isMonthsPopupVisible = !isMonthsPopupVisible;
        Dreamparam = title;
        Dreamidparam = id;
    }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadDataAsync();
    }

    private async Task HandleValidSubmit()
    {
        var success = await ViewModel.AddDreamAsync(newDreamData);
        if (success)
        {
            ToggleNewDreamPopup();
            newDreamData = new DreamData(); // Reset the form
        }
    }
}