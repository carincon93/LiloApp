@page "/dreams-board/list"

@inject LiloApp.Services.NavigatorService NavigatorService
@inject LiloApp.ViewModels.MainViewModel ViewModel
@using LiloApp.Data
@inject IJSRuntime JSRuntime

<div>
    <h1 class="text-5xl font-medium text-center text-white select-none">Calendario de sueños</h1>

    <div class="mt-10">
       @if (ViewModel.Dreams != null)
        {
            <div class="grid h-full w-full grid-cols-2 gap-4">
                @{
                    var buttonClasses = new[]
                    {
                        "row-span-2 h-48",
                        "h-20",
                        "row-span-2 h-48",
                        "row-span-2",
                        "h-20",
                        "col-span-2 h-20"
                        };

                    int index = 0;
                }
                @foreach (var dream in ViewModel.Dreams)
                {
                    <button @onclick="@(() => ToggleMonthsPopup(dream.Title, dream.Id, dream.IsPrivate))"
                            class="flex items-center justify-center bg-white p-4 rounded-xl shadow-xl @buttonClasses[index]">
                            <span class="@(dream.IsPrivate ? "blur-md" : "") active:blur-none">
                                @dream.Title
                            </span>
                    </button>

                    index = (index + 1) % buttonClasses.Length;
                }
            </div>
        }
    </div>

    <div class="mt-4">
        <button class="block w-full relative p-[0.7em] text-lg" @onclick="@(() => ToggleNewDreamPopup(0))">
            <svg class="button__shape w-full" viewBox="0 0 100 100" preserveAspectRatio="none" aria-hidden="true">
                <path class="button__path" d="M0,0 C0,-5 100,-5 100,0 C105,0 105,100 100,100 C100,105 0,105 0,100 C-5,100 -5,0 0,0 z" />
            </svg>
            <span class="block relative text-center text-white">
                Agregar sueño
            </span>
        </button>
    </div>

    @if (isNewDreamPopupVisible)
    {
        <div class="fixed inset-0 focus-within:-top-40 flex items-center justify-center z-[9999]">
            <div class="bg-white rounded-2xl shadow-lg w-9/12">
                <div class="p-3 flex justify-between">
                    <span></span>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6" @onclick="@(() => ToggleNewDreamPopup(0))">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                    </svg>
                </div>

                <div>
                    <h1 class="text-center font-medium text-2xl select-none">
                        @(Dreamidparam != 0 ? "Editar" : "Nuevo") sueño
                    </h1>
                </div>

                <div class="p-6">
                    <EditForm Model="newDreamData" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <InputText id="dream" @bind-Value="newDreamData.Title" placeholder="Nombre del sueño" class="bg-gray-100 p-2 rounded-md text-center" />

                        <label class="flex items-center mt-4 text-xs">
                            <div class="mr-2">
                                <InputCheckbox @bind-Value="newDreamData.IsPrivate" />
                            </div>
                            Seleccione este ítem si quiere que el sueño sea privado
                        </label>

                        <button class="block w-full relative p-[0.3em] mt-8 text-lg" type="submit">
                            <svg class="button__shape w-full" viewBox="0 0 100 100" preserveAspectRatio="none" aria-hidden="true">
                                <path class="button__path" d="M0,0 C0,-5 100,-5 100,0 C105,0 105,100 100,100 C100,105 0,105 0,100 C-5,100 -5,0 0,0 z" />
                            </svg>
                            <span class="block relative text-center text-white">
                                Guardar
                            </span>
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    }

    @if (isMonthsPopupVisible)
    {
        <div class="fixed inset-0 flex items-center justify-center z-[9998]">
            <div class="bg-white rounded-2xl shadow-lg w-11/12">
                <div class="p-3 flex justify-between">
                    <span></span>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6" @onclick="@(() => ToggleMonthsPopup("", 0, false))">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                    </svg>
                </div>

                <div>
                    <div>
                        <h1 class="text-center font-medium select-none text-2xl @(DreamPrivado ? "blur-md" : "") active:blur-none">@Dreamparam</h1>
                        <small @onclick="() => ToggleNewDreamPopup(Dreamidparam)" class="ml-2 underline block text-center">Editar</small>
                    </div>
                    <h2 class="text-center select-none mt-4">Seleccione un mes</h2>
                </div>

                <div class="p-6 grid grid-cols-2 gap-4">
                    <NavLink href="@($"/dreams-board/list/{Dreamparam}/1/{Dreamidparam}")" class="block w-full shadow p-2 rounded-xl">Enero</NavLink>
                    <NavLink href="@($"/dreams-board/list/{Dreamparam}/2/{Dreamidparam}")" class="block w-full shadow p-2 rounded-xl">Febrero</NavLink>
                    <NavLink href="@($"/dreams-board/list/{Dreamparam}/3/{Dreamidparam}")" class="block w-full shadow p-2 rounded-xl">Marzo</NavLink>
                    <NavLink href="@($"/dreams-board/list/{Dreamparam}/4/{Dreamidparam}")" class="block w-full shadow p-2 rounded-xl">Abril</NavLink>
                    <NavLink href="@($"/dreams-board/list/{Dreamparam}/5/{Dreamidparam}")" class="block w-full shadow p-2 rounded-xl">Mayo</NavLink>
                    <NavLink href="@($"/dreams-board/list/{Dreamparam}/6/{Dreamidparam}")" class="block w-full shadow p-2 rounded-xl">Junio</NavLink>
                    <NavLink href="@($"/dreams-board/list/{Dreamparam}/7/{Dreamidparam}")" class="block w-full shadow p-2 rounded-xl">Julio</NavLink>
                    <NavLink href="@($"/dreams-board/list/{Dreamparam}/8/{Dreamidparam}")" class="block w-full shadow p-2 rounded-xl">Agosto</NavLink>
                    <NavLink href="@($"/dreams-board/list/{Dreamparam}/9/{Dreamidparam}")" class="block w-full shadow p-2 rounded-xl">Septiembre</NavLink>
                    <NavLink href="@($"/dreams-board/list/{Dreamparam}/10/{Dreamidparam}")" class="block w-full shadow p-2 rounded-xl">Octubre</NavLink>
                    <NavLink href="@($"/dreams-board/list/{Dreamparam}/11/{Dreamidparam}")" class="block w-full shadow p-2 rounded-xl">Noviembre</NavLink>
                    <NavLink href="@($"/dreams-board/list/{Dreamparam}/12/{Dreamidparam}")" class="block w-full shadow p-2 rounded-xl">Diciembre</NavLink>
                </div>

                <hr />

                <button class="text-center bg-red-100 p-4 w-full text-red-600 rounded-b-2xl" @onclick="@(() => HandleDeleteSubmit(ViewModel.Dreams.Find(item => item.Id == Dreamidparam)))">Eliminar</button>
            </div>
        </div>
    }
</div>

@code {
    private DreamData newDreamData = new DreamData();

    private bool isNewDreamPopupVisible = false;
    private bool isMonthsPopupVisible = false;
    private string Dreamparam { get; set; } = string.Empty;
    private int Dreamidparam { get; set; }
    private bool DreamPrivado { get; set; }

    public int Month = DateTime.Now.Month;

    protected override void OnInitialized()
    {
        NavigatorService.NavigateTo("DreamsBoardListPage");
    }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Ensure the class is removed on initial load
            await JSRuntime.InvokeVoidAsync("removeBodyBlurPopup");
        }
    }

    protected async void ToggleNewDreamPopup(int id)
    {
        isNewDreamPopupVisible = !isNewDreamPopupVisible;
        isMonthsPopupVisible = false;

        Dreamidparam = id;

        if (isNewDreamPopupVisible)
        {
            await JSRuntime.InvokeVoidAsync("addBodyBlurPopup");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("removeBodyBlurPopup");
        }
    }

    protected async void ToggleMonthsPopup(string title, int id, bool esPrivado)
    {
        isMonthsPopupVisible = !isMonthsPopupVisible;
        Dreamparam = title;
        Dreamidparam = id;
        DreamPrivado = esPrivado;

        if (isMonthsPopupVisible)
        {
            await JSRuntime.InvokeVoidAsync("addBodyBlurPopup");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("removeBodyBlurPopup");
        }
    }

    private async Task HandleValidSubmit()
    {
        newDreamData = new DreamData
            {
                Id = Dreamidparam != null ? Dreamidparam : 0,
                IsPrivate = newDreamData.IsPrivate,
                Title = newDreamData.Title
            };

        var success = await ViewModel.AddDreamAsync(newDreamData);
        if (success)
        {
            isMonthsPopupVisible = false;
            ToggleNewDreamPopup(0);
            newDreamData = new DreamData();
            Dreamidparam = 0;
        }
    }

    private async Task HandleDeleteSubmit(DreamData dreamData)
    {
        var success = await ViewModel.DeleteDreamAsync(dreamData);
        if (success)
        {
            ToggleMonthsPopup("", 0, false);
            newDreamData = new DreamData();
        }
    }
}