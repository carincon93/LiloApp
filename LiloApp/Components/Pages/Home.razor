@page "/"

@inject LiloApp.Services.NavigatorService NavigatorService
@inject LiloApp.ViewModels.MainViewModel ViewModel
@using LiloApp.Data

<div class="top-12 relative wrapper">
    <h1 class="text-5xl font-semibold text-center mb-8 select-none">¿Qué deseas hacer hoy?</h1>

    @if (Pet != null)
    {
        <img src=@($"/images/{Pet.Animal}_pixelart.png") class="m-auto block my-16 select-none" />
    }

    <ul class="space-y-8 px-8">
        <li>
            <div class="block relative p-[0.7em] text-lg pointer-event-none">
                <svg class="button__shape w-full fill-gray-300 pointer-event-none" viewBox="0 0 100 100" preserveAspectRatio="none" aria-hidden="true">
                    <path class="button__path" d="M0,0 C0,-5 100,-5 100,0 C105,0 105,100 100,100 C100,105 0,105 0,100 C-5,100 -5,0 0,0 z" />
                </svg>
                <span class="block relative text-center text-white">
                    Aprender inglés
                </span>
            </div>
        </li>
        <li>
            <NavLink href="/dreams-board" class="block relative p-[0.7em] text-lg">
                <svg class="button__shape w-full" viewBox="0 0 100 100" preserveAspectRatio="none" aria-hidden="true">
                    <path class="button__path" d="M0,0 C0,-5 100,-5 100,0 C105,0 105,100 100,100 C100,105 0,105 0,100 C-5,100 -5,0 0,0 z" />
                </svg>
                <span class="block relative text-center text-white">
                    Calendario de sueños
                </span>
            </NavLink>
        </li>
        <li>
            <NavLink href="/workout" class="block relative p-[0.7em] text-lg">
                <svg class="button__shape w-full" viewBox="0 0 100 100" preserveAspectRatio="none" aria-hidden="true">
                    <path class="button__path" d="M0,0 C0,-5 100,-5 100,0 C105,0 105,100 100,100 C100,105 0,105 0,100 C-5,100 -5,0 0,0 z" />
                </svg>
                <span class="block relative text-center text-white">
                    Mi progreso físico
                </span>
            </NavLink>
        </li>
    </ul>

    @if (isPetPopupVisible)
    {
        <div class="bg-white w-full fixed inset-0 z-[10001] flex flex-col items-center justify-center">
            <div>
                <h1 class="text-center font-medium text-6xl mx-8 select-none">Selecciona tu mascota</h1>
            </div>

            <div class="p-6 flex items-center justify-center gap-8">
                <img src="/images/dog_pixelart.png" class="m-auto block my-16" @onclick="@(() => selectPet("dog"))" />
                <img src="/images/cat_pixelart.png" class="m-auto block my-16" @onclick="@(() => selectPet("cat"))" />
            </div>
        </div>
    }

    @if (isNewAccountPopupVisible)
    {
        <div class="fixed inset-0 backdrop-blur-sm bg-white/30 flex items-center justify-center z-[10002] focus-within:-top-40">
            <div class="bg-white rounded-2xl shadow-lg w-9/12">
                <div class="p-3 flex justify-between">
                    <span></span>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6" @onclick="@(() => selectPet(""))">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                    </svg>
                </div>

                <div>
                    <h1 class="text-center font-medium text-2xl select-none">Nueva mascota</h1>
                </div>

                <div class="p-6">
                    <img src="@($"/images/{petSelected}_pixelart.png")" class="m-auto block my-8 select-none" />

                    <EditForm Model="newPetData" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <InputText id="pet" @bind-Value="newPetData.Name" placeholder="Nombre de la mascota" class="bg-gray-100 p-2 rounded-md text-center" />

                        <InputText id="owner" @bind-Value="newOwnerData.Name" placeholder="Nombre del/la dueño/a" class="bg-gray-100 p-2 rounded-md text-center mt-2" />

                        <button class="block w-full relative p-[0.3em] mt-8 text-lg" type="submit">
                            <svg class="button__shape w-full" viewBox="0 0 100 100" preserveAspectRatio="none" aria-hidden="true">
                                <path class="button__path" d="M0,0 C0,-5 100,-5 100,0 C105,0 105,100 100,100 C100,105 0,105 0,100 C-5,100 -5,0 0,0 z" />
                            </svg>
                            <span class="block relative text-center text-white">
                                Guardar
                            </span>
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private PetData newPetData = new PetData();
    private OwnerData newOwnerData = new OwnerData();
    private PetData Pet { get; set; }
    private string petSelected { get; set; }

    private bool isPetPopupVisible { get; set; }

    private bool isNewAccountPopupVisible = false;

    protected override void OnInitialized()
    {
        NavigatorService.NavigateTo("HomePage");
    }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadDataAsync();

        if (ViewModel != null && ViewModel.Owners != null && ViewModel.Pets != null)
        {
            isPetPopupVisible = ViewModel.Owners.Count == 0;
            Pet = ViewModel.Pets.Count == 0 ? null : ViewModel.Pets.First();
        }
    }

    protected void TogglePetPopup()
    {
        isPetPopupVisible = !isPetPopupVisible;
    }

    protected void selectPet(string animal)
    {
        petSelected = animal;
        isNewAccountPopupVisible = !isNewAccountPopupVisible;
    }

    private async Task HandleValidSubmit()
    {
        newOwnerData = new OwnerData
            {
                Name = newOwnerData.Name
            };

        await ViewModel.AddOwnerAsync(newOwnerData);

        newPetData = new PetData
            {
                Animal = petSelected,
                Name = newPetData.Name,
                Life = 100,
            };

        var success = await ViewModel.AddPetAsync(newPetData);
        if (success)
        {
            await ViewModel.LoadDataAsync();

            TogglePetPopup();
            isNewAccountPopupVisible = false;
            newPetData = new PetData();
            newOwnerData = new OwnerData();
        }
    }
}