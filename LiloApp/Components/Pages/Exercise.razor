@page "/workout/muscle-groups/{exerciseparam}/{musclegroupidparam}"

@inject LiloApp.Services.NavigatorService NavigatorService
@inject LiloApp.ViewModels.MainViewModel ViewModel
@using LiloApp.Data
@inject IJSRuntime JSRuntime

<div>
	<h2 class="font-medium text-3xl text-center my-10 select-none">@Exerciseparam</h2>

	<div>
		@if (ViewModel.Exercises != null)
		{
			<div class="grid h-full w-full grid-cols-2 gap-4">
				@{
					var buttonClasses = new[]
					{
						"row-span-2 h-48",
						"h-20",
						"row-span-2 h-48",
						"row-span-2",
						"h-20",
						"col-span-2 h-20"
					};

					int index = 0;
				}
				@foreach (var exercise in GetFilteredExercises())
				{
					<button @onclick="@(() => ToggleExercisePopup(exercise.Name, exercise.Id))" class="flex items-center justify-center bg-white p-4 rounded-xl shadow-xl @buttonClasses[index]">
						<span class="select-none">@exercise.Name</span>
					</button>

					index = (index + 1) % buttonClasses.Length;
				}
			</div>
		}
	</div>

	<div class="mt-4">
		<button class="block w-full relative p-[0.7em] text-lg" onclick="@(() => ToggleNewExercisePopup())">
			<svg class="button__shape w-full" viewBox="0 0 100 100" preserveAspectRatio="none" aria-hidden="true">
				<path class="button__path" d="M0,0 C0,-5 100,-5 100,0 C105,0 105,100 100,100 C100,105 0,105 0,100 C-5,100 -5,0 0,0 z" />
			</svg>
			<span class="block relative text-center text-white">
				Agregar ejercicio
			</span>
		</button>
	</div>

	@if (isNewExercisePopupVisible)
	{
		<div class="fixed inset-0 flex items-center justify-center z-[10002] focus-within:-top-40">
			<div class="bg-white rounded-2xl shadow-lg w-9/12">

				<div class="p-3 flex justify-between">
					<span></span>
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6" @onclick="@(() => ToggleNewExercisePopup())">
						<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
					</svg>
				</div>

				<div>
					<h1 class="text-center font-medium text-2xl select-none">
						@(exerciseId != null ? "Editar" : "Nuevo") ejercicio
					</h1>
				</div>
  
				<div class="p-6">
					<EditForm Model="newExerciseData" OnValidSubmit="HandleValidSubmit">
						<DataAnnotationsValidator />
						<ValidationSummary />

						<InputText id="dream" @bind-Value="newExerciseData.Name" placeholder="Nombre del ejercicio" class="bg-gray-100 p-2 rounded-md text-center" />

						<button class="block w-full relative p-[0.3em] mt-8 text-lg" type="submit">
							<svg class="button__shape w-full" viewBox="0 0 100 100" preserveAspectRatio="none" aria-hidden="true">
								<path class="button__path" d="M0,0 C0,-5 100,-5 100,0 C105,0 105,100 100,100 C100,105 0,105 0,100 C-5,100 -5,0 0,0 z" />
							</svg>
							<span class="block relative text-center text-white">
								Guardar
							</span>
						</button>
					</EditForm>
				</div>
			</div>
		</div>
	}

	@if (isExercisePopupVisible)
	{
		<div class="fixed inset-0 flex items-center justify-center z-[10000] focus-within:-top-40">
			<div class="bg-white rounded-2xl shadow-lg w-9/12">

				<div class="p-3 flex justify-between">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6 text-red-400" @onclick="@(() => HandleDeleteSubmit(ViewModel.Exercises.Find(item => item.Id == exerciseId)))">
						<path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
					</svg>

					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6" @onclick="@(() => ToggleExercisePopup("", 0))">
						<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
					</svg>
				</div>

				<div>
					<h1 class="text-center font-medium select-none text-2xl">@titleExercise</h1>
					<small @onclick="() => ToggleNewExercisePopup()" class="ml-2 underline block text-center">Editar</small>
				</div>

				@{
					int index = 0;
				}
				@foreach (var trainingSession in GetFilteredTrainingSessions())
				{
					<div class="mx-6">
						@if (index == 0)
						{
							<div class="flex justify-between text-xs font-medium mt-4">
								<span>Fecha</span>
								<span>Reps</span>
								<span>Peso</span>
							</div>
						}
						<div class="flex text-xs pt-2 justify-between">
							<span>@trainingSession.DayNumber/@trainingSession.MonthNumber/@trainingSession.Year</span>
							<span class="relative -left-5">@(trainingSession.Reps < 9 ? "0" + trainingSession.Reps : trainingSession.Reps)</span>
							<span>@(trainingSession.Weight < 9 ? "0" + trainingSession.Weight : trainingSession.Weight)</span>
						</div>
					</div>
					index++;
				}

				<div class="p-6">
					<EditForm Model="newTrainingSession" OnValidSubmit="HandleTrainingSessionValidSubmit">
						<DataAnnotationsValidator />
						<ValidationSummary />

						<InputNumber name="reps" @bind-Value="newTrainingSession.Reps" placeholder="Reps" class="bg-gray-100 p-2 rounded-md mb-2" />
						<InputNumber name="weight" @bind-Value="newTrainingSession.Weight" placeholder="Peso (Kg)" class="bg-gray-100 p-2 rounded-md mb-2" />

						<button class="block w-full relative p-[0.3em] mt-8 text-lg" type="submit">
							<svg class="button__shape w-full" viewBox="0 0 100 100" preserveAspectRatio="none" aria-hidden="true">
								<path class="button__path" d="M0,0 C0,-5 100,-5 100,0 C105,0 105,100 100,100 C100,105 0,105 0,100 C-5,100 -5,0 0,0 z" />
							</svg>
							<span class="block relative text-center text-white">
								Guardar
							</span>
						</button>
					</EditForm>
				</div>
			</div>
		</div>
	}
</div>

@code {
	private PetData petData = new PetData();
	private ExerciseData newExerciseData = new ExerciseData();
	private TrainingSessionData newTrainingSession = new TrainingSessionData();

	[Parameter]
	public string Exerciseparam { get; set; } = string.Empty;

	[Parameter]
	public string Musclegroupidparam { get; set; } = string.Empty;

	private bool isNewExercisePopupVisible = false;
	private bool isExercisePopupVisible = false;
	public string titleExercise { get; set; } = string.Empty;
	public int exerciseId { get; set; }

	protected override void OnInitialized()
	{
		NavigatorService.NavigateTo("ExcercisePage");
	}

	protected override async Task OnInitializedAsync()
	{
		await ViewModel.LoadDataAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			// Ensure the class is removed on initial load
			await JSRuntime.InvokeVoidAsync("removeBodyBlurPopup");
		}
	}

	private List<ExerciseData> GetFilteredExercises()
	{
		if (int.TryParse(Musclegroupidparam, out int exerciseId))
		{
			return ViewModel.Exercises
							.Where(item => item.MuscleGroupId == exerciseId)
							.Select(item => new ExerciseData
								{
									Name = item.Name,
									Id = item.Id,
									MuscleGroupId = item.MuscleGroupId
								})
							.ToList();
		}
		return new List<ExerciseData>();
	}

	private List<TrainingSessionData> GetFilteredTrainingSessions()
	{
		return ViewModel.TrainingSessions
						.Where(item => item.ExerciseId == exerciseId)
						.OrderByDescending(item => item.Id)
						.Take(4)
						.Select(item => new TrainingSessionData
							{
								DayNumber = item.DayNumber,
								MonthNumber = item.MonthNumber,
								Year = item.Year,
								Reps = item.Reps,
								Weight = item.Weight,
								ExerciseId = item.ExerciseId
							})
						.ToList();
	}

	private async void ToggleNewExercisePopup()
	{
		isNewExercisePopupVisible = !isNewExercisePopupVisible;
		isExercisePopupVisible = false;

		if (isNewExercisePopupVisible)
		{
			await JSRuntime.InvokeVoidAsync("addBodyBlurPopup");
		}
		else
		{
			await JSRuntime.InvokeVoidAsync("removeBodyBlurPopup");
		}
	}

	private async void ToggleExercisePopup(string excerciseName, int id)
	{
		isExercisePopupVisible = !isExercisePopupVisible;
		titleExercise = excerciseName;
		exerciseId = id;

		if (isExercisePopupVisible)
		{
			await JSRuntime.InvokeVoidAsync("addBodyBlurPopup");
		}
		else
		{
			await JSRuntime.InvokeVoidAsync("removeBodyBlurPopup");
		}
	}

	private async Task HandleValidSubmit()
	{
		newExerciseData = new ExerciseData
			{
				Id = exerciseId != null ? exerciseId : 0,
				Name = newExerciseData.Name,
				MuscleGroupId = int.Parse(Musclegroupidparam)
			};

		var success = await ViewModel.AddExerciseAsync(newExerciseData);
		if (success)
		{
			ToggleNewExercisePopup();
			isExercisePopupVisible = false;
			exerciseId = 0;
			newExerciseData = new ExerciseData();
		}
	}

	private async Task HandleTrainingSessionValidSubmit()
	{
		DateTime currentDate = DateTime.Now;

		newTrainingSession = new TrainingSessionData
			{
				Reps = newTrainingSession.Reps,
				Weight = newTrainingSession.Weight,
				ExerciseId = exerciseId,
				DayNumber = currentDate.Day,
				MonthNumber = currentDate.Month,
				Year = currentDate.Year
			};

		var success = await ViewModel.AddTrainingSessionAsync(newTrainingSession);
		if (success)
		{
			ToggleExercisePopup("", 0);
			newTrainingSession = new TrainingSessionData();

			petData = new PetData
				{
					Id = 1,
					Animal = ViewModel.Pets.First().Animal,
					Name = ViewModel.Pets.First().Name,
					Life = ViewModel.Pets.First().Life + 0.1
				};
			await ViewModel.AddPetAsync(petData);
		}
	}

	private async Task HandleDeleteSubmit(ExerciseData excerciseData)
	{
		var success = await ViewModel.DeleteExerciseAsync(excerciseData);
		if (success)
		{
			ToggleExercisePopup("", 0);
			excerciseData = new ExerciseData();
		}
	}
}
