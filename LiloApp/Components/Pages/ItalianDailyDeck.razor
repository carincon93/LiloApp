@page "/italian/daily-deck/{selectedweek}/{selectedday}"

@inject LiloApp.Services.NavigatorService NavigatorService
@inject LiloApp.Services.ApiService ApiService
@inject LiloApp.ViewModels.MainViewModel ViewModel
@inject IJSRuntime JSRuntime
@using LiloApp.Data

<ul>
    @if (italianWords.Count > 0 && int.Parse(selectedday) < italianWords.Count)
    {
        <p class="text-center mt-10 text-gray-400">Objetivo de la semana @selectedweek: <br />Aprender @italianWords.Count palabras</p>
        @foreach (var word in italianWords.Select((word, index) => new { word, index }))
        {
            @if (word.index == indexSelectedCard)
            {
                <li class="card relative z-6" @onclick="() => ToggleFlip(word.index)">
                    <div class="card-inner @(flippedStates.ContainsKey(word.index) && flippedStates[word.index] ? "card-flipped" : "")">
                        <div class="card-face card-front shadow-lg rounded-lg bg-white">
                            <p class="capitalize">@word.word.Word</p>
                        </div>
                        <div class="card-face card-back shadow-lg rounded-lg bg-white">
                            <p class="capitalize">@word.word.Translation</p>
                        </div>
                    </div>
                </li>
            }
        }

        <div class="flex items-center justify-between relative z-1 -top-[12rem]">
            <button @onclick="DecrementIndex" class="@(indexSelectedCard > int.Parse(selectedday) ? "" : "text-gray-400")">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" />
                </svg>
            </button>
            <button @onclick="IncrementIndex" class="@(indexSelectedCard < int.Parse(selectedday) + 14 ? "" : "text-gray-400")">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
                </svg>
            </button>
        </div>

        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6" @onclick="@(() => TogglePopup())">
            <path stroke-linecap="round" stroke-linejoin="round" d="m11.25 11.25.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9-3.75h.008v.008H12V8.25Z" />
        </svg>

        @if (isPopupVisible)
        {
            <div class="fixed inset-0 flex items-center justify-center z-[10000] focus-within:-top-40">
                <div class="bg-white rounded-2xl shadow-lg w-9/12">

                    <div class="p-3 flex justify-between">
                        <span></span>
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6" @onclick="@(() => TogglePopup())">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                        </svg>
                    </div>

                    <div>
                        <h1 class="text-center font-medium text-2xl px-4 select-none">¿Cómo mejorar la asociación de las palabras?</h1>
                    </div>

                    <div class="p-6">
                        <p class="mb-4 leading-5 text-justify">Primero, traduce la palabra al español. Luego, aprende su pronunciación en italiano. Finalmente, construye una oración que incluya la palabra traducida. Para recordar mejor la pronunciación, asóciala con una palabra en español que suene similar.</p>
                        <p class="text-sky-500 font-medium">Cibo - Alimeno (Traducción)</p>
                        <p class="text-indigo-500 font-medium">Chivo (Pronunciación)</p>
                        <p class="mt-4">
                            "Imagínate un <span class="text-indigo-500">chivo</span> que está disfrutando de su <span class="text-sky-500">comida</span> favorita"
                        </p>
                    </div>
                </div>
            </div>
        }

        <EditForm Model="newLanguagePracticeData" OnValidSubmit="HandleValidSubmit" class="focus-within:-top-[20rem] relative z-8">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputTextArea name="comentario" @bind-Value="newLanguagePracticeData.Text" class="bg-white shadow p-2 rounded-md mt-2 min-h-32" placeholder="Ingrese un texto" />

            <button class="block w-full relative p-[0.3em] mt-8 text-lg" type="submit">
                <svg class="button__shape w-full" viewBox="0 0 100 100" preserveAspectRatio="none" aria-hidden="true">
                    <path class="button__path" d="M0,0 C0,-5 100,-5 100,0 C105,0 105,100 100,100 C100,105 0,105 0,100 C-5,100 -5,0 0,0 z" />
                </svg>
                <span class="block relative text-center text-white">
                    Guardar
                </span>
            </button>
        </EditForm>
    }
    else
    {
        <div class="flex items-center justify-center flex-col min-h-[70vh] z-[10002]">
            <img src="images/catdog_pixelart.svg" class="w-20" />
            <h1 class="font-medium mt-4">Cargando...</h1>
        </div>
    }
</ul>

@code {
    [Parameter]
    public string selectedweek { get; set; } = string.Empty;

    [Parameter]
    public string selectedday { get; set; } = string.Empty;

    private bool isFlipped = false;
    public bool isPopupVisible = false;
    private Dictionary<int, bool> flippedStates = new Dictionary<int, bool>();
    private LanguagePracticeData newLanguagePracticeData = new LanguagePracticeData();
    private List<ItalianWordData> italianWords = new List<ItalianWordData>();
    private int indexSelectedCard = 0;

    protected override void OnInitialized()
    {
        indexSelectedCard = int.Parse(selectedday);

        NavigatorService.NavigateTo("DailyDeckPage");
    }

    protected override async Task OnInitializedAsync()
    {
        italianWords = await ApiService.GetItalianWordsByWeekAsync(selectedweek);
        await LoadSelectedLanguagePractice();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Ensure the class is removed on initial load
            await JSRuntime.InvokeVoidAsync("removeBodyBlurPopup");
        }
    }

    private void IncrementIndex()
    {
        if (indexSelectedCard < italianWords.Count - 1 && indexSelectedCard < int.Parse(selectedday) + 14)
        {
            indexSelectedCard++;
        }
    }

    private void DecrementIndex()
    {
        if (indexSelectedCard > int.Parse(selectedday))
        {
            indexSelectedCard--;
        }
    }

    private void ToggleFlip(int index)
    {
        if (flippedStates.ContainsKey(index))
        {
            flippedStates[index] = !flippedStates[index];
        }
        else
        {
            flippedStates[index] = true;
        }
    }

    private async Task LoadSelectedLanguagePractice()
    {
        var existingPractice = await ViewModel.GetLanguagePracticeByDayAndWeekAsync(int.Parse(selectedday), int.Parse(selectedweek), "Italian");
        newLanguagePracticeData = existingPractice ?? new LanguagePracticeData
            {
                Day = int.Parse(selectedday),
                Week = int.Parse(selectedweek),
                Language = "Italian"
            };
    }

    private async Task HandleValidSubmit()
    {
        newLanguagePracticeData.Day = int.Parse(selectedday);
        newLanguagePracticeData.Week = int.Parse(selectedweek);
        newLanguagePracticeData.Language = "Italian";

        var success = await ViewModel.AddLanguagePracticeAsync(newLanguagePracticeData);
    }

    protected async void TogglePopup()
    {
        isPopupVisible = !isPopupVisible;

        if (isPopupVisible)
        {
            await JSRuntime.InvokeVoidAsync("addBodyBlurPopup");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("removeBodyBlurPopup");
        }
    }
}
